@page "/financialoperation/edit/{id:int}"
@inject IFInancialOperationServices FinancialOperationServices
@inject IIncomeExpensesServices IncomeExpensesServices
@inject NavigationManager Navigation

<h3>Editing @financialOperation.Name</h3>

<RadzenTemplateForm Data="@financialOperation" Submit="@((FinancialOperation args) => { SubmitAsync(args); })">
        <div class="row">
            <div class="col-md-6">
                <RadzenFieldset Text="Editing Financial Operation">
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Id" />
                        </div>
                        <div class="col-md-8">
                            <RadzenNumeric style="width: 100%;" @bind-Value="financialOperation.Id" ReadOnly/>
                        </div>
                    </div>
                     <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Name" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox style="width: 100%;" @bind-Value="financialOperation.Name" />
                        </div>
                    </div>
					 <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Description" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox style="width: 100%;" @bind-Value="financialOperation.Description" />
                        </div>
                    </div>
					<div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Date" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDatePicker style="width: 100%;" @bind-Value="financialOperation.Date" DateFormat="dd.MM.yyyy" />
                        </div>
                    </div>
					 <div class="row">
                       <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Price" />
                        </div>
                        <div class="col-md-8">
                           <RadzenNumeric style="width: 100%;" Name="Price" @bind-Value="financialOperation.Price" />
                        </div>
                     </div>
					  <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Operation Type" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="financialOperation.IncomeExpensesName" AllowClear="true" Placeholder="Select operation type" Data="@IncomeExpensesServices.IncomeExpenses" style="width: 100%;" TextProperty="Name" ValueProperty="Name" Name="Name">
						  </RadzenDropDown>
                        </div>
                    </div>
                     <div class="row justify-content-center">
                        <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                            <RadzenButton ButtonType="ButtonType.Submit" Icon="check_circle" ButtonStyle="ButtonStyle.Success" Text="Edit" />
                        </div>
                    </div>
	            </RadzenFieldset>
            </div>
        </div>
</RadzenTemplateForm>

@code {
    [Parameter]
    public int Id { get; set; }

    FinancialOperation financialOperation = new();

    protected override async Task OnInitializedAsync()
    {
        await IncomeExpensesServices.GetAllIncomeExpensesAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
		if (Id != null)
		{
			financialOperation = await FinancialOperationServices.GetSingleFinanceOperationAsync(Id);
		}
	}

	private async Task SubmitAsync(FinancialOperation agrs)
	{
		await FinancialOperationServices.UpdateFinancialOperationAsync(financialOperation);
		Navigation.NavigateTo("financialoperations");
	}
}